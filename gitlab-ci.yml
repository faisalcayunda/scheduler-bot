stages:
  - build
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - venv/

build:
  stage: build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "building image for ${CI_COMMIT_REF_NAME} branch"
    - docker build --network host -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME} -f Dockerfile .
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest
  after_script:
    - docker logout ${CI_REGISTRY}
  only:
    refs:
      - main
  tags:
    - ekosistem-data-jabar

deploy:
  stage: deploy
  before_script:
    - apk update
    - apk add --update --no-cache sshpass
  script:
    - sshpass -p ${DEPLOYMENT_SERVER_PASS} ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_IP} "docker rm -f telegram-bot-replikasi && docker rmi ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest --force || true"
    - sshpass -p ${DEPLOYMENT_SERVER_PASS} ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_IP} "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY} && docker run -d --name telegram-bot-replikasi ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest"
  needs:
    - build
  only:
    refs:
      - main
  tags:
    - ekosistem-data-jabar